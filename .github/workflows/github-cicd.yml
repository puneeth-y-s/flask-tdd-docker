name: Github CI Workflow

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:stable
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Pull Docker image
        run: |
          docker pull ghcr.io/${{ github.repository }}:latest || true

      - name: Build Docker image
        run: |
          docker build \
            --cache-from ghcr.io/${{ github.repository }}:latest \
            --tag ghcr.io/${{ github.repository }}:latest \
            --file ./Dockerfile.prod \
            .

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository }}:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ghcr.io/${{ github.repository }}:latest  # Use the image built in the build stage
      options: --privileged  # Enable privileged mode for PostgreSQL to run inside the container

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: users
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: runner
        ports:
          - 5432:5432

    env:
      POSTGRES_DB: users
      POSTGRES_USER: runner
      POSTGRES_PASSWORD: runner
      DATABASE_URL: postgresql://runner:runner@postgres:5432/users  # PostgreSQL service URL
      DATABASE_TEST_URL: postgresql://runner:runner@postgres:5432/users  # PostgreSQL service URL

    steps:
      # - name: Check container's file structure
      #   run: |
      #     ls -R /usr/src/app

      - name: Install dev dependencies
        run: |
          python3 -m venv /tmp/env
          . /tmp/env/bin/activate
          cd /usr/src/app
          pip install -r requirements.txt
          pip install black==23.11.0 flake8==6.1.0 isort==5.12.0 pytest==7.4.3

      - name: Run pytest
        run: |
          python -m pytest "src/tests" -p no:warnings
        working-directory: /usr/src/app

      # 6. Run flake8
      - name: Run flake8
        run: |
          python -m flake8 src
        working-directory: /usr/src/app

      # 7. Run black
      - name: Run black
        run: |
          python -m black src --check
        working-directory: /usr/src/app

      # 8. Run isort
      - name: Run isort
        run: |
          python -m isort src --check-only
        working-directory: /usr/src/app

  deploy:
    runs-on: ubuntu-latest
    needs: test
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    env:
      HEROKU_APP_NAME: hidden-ocean-12299
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/hidden-ocean-12299/web
      HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Install curl for the release script
      - name: Install curl
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      # 4. Make release.sh executable
      - name: Make release.sh executable
        run: chmod +x ./release.sh

      # 5. Build Docker image
      - name: Build Docker image
        run: |
          docker build \
            --tag $HEROKU_REGISTRY_IMAGE \
            --file ./Dockerfile.prod \
            .
        
      # 6. Login to Heroku Docker registry
      - name: Log in to Heroku Docker registry
        run: |
          echo ${{ secrets.HEROKU_AUTH_TOKEN }} | docker login --username=_ --password-stdin registry.heroku.com

      # 7. Push the Docker image to Heroku
      - name: Push Docker image to Heroku
        run: |
          docker push $HEROKU_REGISTRY_IMAGE

      # 8. Run the release script
      - name: Run release script
        run: ./release.sh
